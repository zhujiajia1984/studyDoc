-----------------------------------------------------------------------------------------------------------------------
模块化升级和安装nodejs
0：查看记录：npm view 包名 version（查看version字段，最新版本）
1：查看npm版本：npm -v
   更新npm：npm install npm@latest -g
   文档：https://docs.npmjs.com/getting-started/installing-node
2：npm安装全局目录：npm config get prefix查看，具体：https://docs.npmjs.com/getting-started/fixing-npm-permissions
3：查看帮助：包名 help
4：升级包（全局）：npm update -g 包名
5：升级包（本地）：npm update --save-dev 包名
6：使用n模块升级和管理nodejs版本：http://www.jb51.net/article/98153.htm

-----------------------------------------------------------------------------------------------------------------------



windows下查看进程：netstat -ano，找到端口号，记录PID
在进程管理中，详细页中，删除PID即可
vi进入文件，i进入编辑模式，esc退出编辑模式，:q!不保存退出 :wq保存并退出

-----------------------------------------------------------------------------------------------------------------------
那如何配置全局模块的安装路径到node-global文件夹，npm缓存到npm-cache文件夹呢？

这个属于npm配置选项了，后面文章会再详细讲到，这里只给出方法：

很简单：

npm config set prefix "D:\node\node-global"
npm config set cache "D:\node\node-cache"
node全局模块大多数都是提供命令行访问的，所以还要把D:\node\node-global加到系统PATH里面，方面直接运行使用！！
验证下吧，装个全局模块：
npm install express -g
查看下node-global和node-cache文件夹下是否有惊喜，嘿嘿~
这样，我们如果想把一台电脑上安装的Node程序以及相关资源（全局模块，模块缓存等）挪到其他机子上，
那就把node整个目录拷贝走，然后在那台机子上按需配置下相关路径就大功告成啦，以前安装的模块缓存都有了，其他机子不上网照样可以安装模块~~

淘宝镜像

(3)在配置文件 ~/.npmrc 文件写入源地址

nano ~/.npmrc   //打开配置文件
registry =https://registry.npm.taobao.org   //写入配置文件


推荐使用最后一种方法,一劳永逸,前面2钟方法都是临时改变包下载源.

如果你不像使用国内镜像站点,只需要将 写入 ~/.npmrc 的配置内容删除即可.

下面是我本地下载ejs包的截图,可以看到默认源地址指向了 cnpm

--------------------------------------------------------------------------------------------

Node.js 视频教程
链接:http://pan.baidu.com/s/1o6kqf3c 密码:vsii
开发语言：javascript（JS），Node.js：服务器端平台（异步和事件驱动）
向下查找：/XXX  继续向下：n   向上查找：?XXX 向上：N

安装顺序：
1：github；
2：nodeJS；
3：ftp服务；
4：防火墙firewall;
5：安装redis；
6：安装Express框架和应用生成器；
7：安装async（处理多层异步回调）；
8：日志模块：Log4js日志模块，
9：connect-favicons安装：浏览器请求favicon.ico文件报错处理
10：安装并使用ejs/html 模板引擎（不用jade）
11：npm install iconv-lite：安装编码插件
12：安装xml转json工具（xml2json），先装（node-gyp）,再装（node-expat）,最后装（xml2json）
    注：更新npm工具
    npm install -d node-expat --unsafe-perm

-------------------------------------------------------------------------------------------
github配置：
1：安装和查询git：yum -y install git   /  git --version
2：clone项目：git clone https://github.com/zhujiajia1984/myapp.git
3：更新文件：git https://github.com/zhujiajia1984/myapp.git
-------------------------------------------------------------------------------------------
开发环境搭建：Node.js要运行在linux系统上
1：阿里云安装操作系统，centOS 7；
2：本地安装xshell和xftp；
3：xshell连上远程服务器，
4：执行：node test.js
5：安装nodejs：默认在root目录，需要移动到opt目录或者usr/local目录
    下载包：wget http://nodejs.org/dist/v6.10.0/node-v6.10.0-linux-x64.tar.gz
    解压包：tar xvf node-v6.10.0-linux-x64.tar.gz
    测试：cd到bin目录下，执行./node -v输出版本号则OK
    NODE 环境配置
    这样可以使得在任何目录下，都可以使用/root/node-v6.10.0-linux-x64/bin 下得node命令
    步骤如下：
    a、切换到 root 用户
    b、vi /etc/profile（点击i进行插入修改）
    c、在最下面加入
       # node （注释作用）
       export NODE_HOME=/root/node-v6.10.0-linux-x64
       export PATH=$PATH:$NODE_HOME/bin
       export NODE_PATH=$NODE_HOME/lib/node_modules
    d、:wq （保存并退出） 
    e、source /etc/profile （使配置文件生效）
    node --version
14：升级nodejs：npm install -g n
    升级到稳定版本：n stable
    升级到指定版本：n v6.10.0

-------------------------------------------------------------------------------------------
创建web服务器（使用核心模块http模块，http服务器）：
特点：不依赖其他特定的web服务器软件（如：apache/nginx/iis）
1：创建web.js文件
2：引用http模块（使用require引用模块）：var http = require('http');
3：创建服务器实例参数：var requestHandler = function(req, res){
  res.end('hello');
};
3：创建服务器实例：var web = http.createServer(requestHandler);
   说明：当有请求连接到服务器后，request事件会传递给requestHandler函数两个参数
   req为请求的一些数据和方法；res为返回给用户的一些数据；
4：服务器监听网络的端口：web.listen(18000);
5：日志输出：console.log('http running on http://localhost:18000');
6：执行：node web.js
6：查看服务：ps -ef | grep node
7：关闭服务：kill pid

-------------------------------------------------------------------------------------------
express生成器：
1：express --version：查看版本
2：app.set/get：设置app指定的环境变量，其他地方可以引用（不常用）
3：app.use(path, fn)：path选填默认/，应用级中间件，在app中加载，挂载目录为path
   中间件说明：http://www.expressjs.com.cn/guide/using-middleware.html#middleware.router
4：next('route')：跳过下一个中间件栈（回调函数），直接执行下一个中间件。
5：GET请求获取参数：req.query.id
6：POST请求获取参数：(app.js中)
   var bodyParser = require("body-parser");
   app.use(bodyParser.urlencoded({ extended: false }));  
   var name = req.body.name;


-------------------------------------------------------------------------------------------
创建web服务器（express模块）：
按照官网进行安装：http://www.expressjs.com.cn/starter/installing.html
1：创建express.js文件
2：引用express模块（使用require引用模块）：var express = require('express');
3：创建实例：var app = express();
4：监听端口和设置回调函数：app.listen(18001, function afterListen(){
  console.log('express running on http://localhost:18001');
});
5：安装npm：yum install npm  / npm -v
6：安装express模块：npm install express
7：执行：node express.js
8：由于没有设置路由，显示cannot get

使用express生成工具来生成模板：
参考官网：http://www.expressjs.com.cn/starter/generator.html
1：安装模块：npm install -g express-generator
2：定位目录：cd
3：目录下生成： express -e ejs 项目名称（myapp）
4：进入项目目录：cd
5：查看package.json：vi package.json
6：退出后，安装依赖：npm install
7：执行：node ./bin/www
8：查看3000端口：http://ip:3000

使用express创建静态服务，可供浏览器访问服务器上各种文件：
1：js文件中创建目录：app.use(express.static('./public'));
2：服务器上的项目下创建目录：先cd 后 mkdir public
3：创建一个文本文件：test.txt
4：重启服务：
5：http://ip:18001/test.txt

路由功能：将不同请求，分配给相应的处理函数。区分：路径、请求方法
path：单纯的路径暴露
Router：不同的子路由
route：同一路由下的不同请求
路由数字ID：news/123：数字来作为路由ID

中间件（next）：分层处理，每层实现一个功能，可流向下一层
app.get('/', function(req, res, next){
  res.end('hello\n');
  next();
});
app.use(morgan());

-------------------------------------------------------------------------------------------
安装redis缓存数据库：
1：下载文件：wget http://download.redis.io/releases/redis-3.2.8.tar.gz
2：解压缩：tar -zxvf redis-3.2.8.tar.gz
3：编译源码：cd redis-3.2.8.tar.gz
   make
4：安装：make install
5：查看重要文件：服务端文件：src/redis-server，客户端文件：src/redis-cls，默认配置文件：redis.conf
6：源码编译的都需要将可执行文件放置在$PATH环境目录下，便于以后执行程序时可以不用输入完整的路径
   将redis-2.8.19文件夹下的redis.conf复制到/usr/local/redis/etc/，并将src目录下的7个命令文件（绿色的），移动到/usr/local/redis/bin/
   mkdir -p /usr/local/redis/bin
   mkdir -p /usr/local/redis/etc
   cp redis.conf /usr/local/redis/etc/
   cd src
   cp mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-sentinel redis-server redis-trib.rb /usr/local/redis/bin/
7：修改redis.conf配置文件，把daemonize 改为 yes ，让redis在后台运行
8：启动服务端：redis-server /usr/local/redis/etc/redis.conf
   关闭服务端：redis-cli进入后shutdown
9：查看进程：ps -ef | grep redis
10：客户端登录测试：redis-cli 然后auth 密码
    查看redis版本号：info
    得到键值：get key
11：安装nodejs中的redis扩展模块：node_redis安装
    npm install redis  /  npm -g install redis
12：设置密码：打开redis.conf文件，找到requirepass，取消注释，设置密码为:porschev

redis报错：MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk
请在/etc/sysctl.conf 添加一项 'vm.overcommit_memory = 1' ，然后重启（或者运行命令'sysctl vm.overcommit_memory=1' ）使其生效。


使用redis缓存数据库：（createClient、set、get、expire）
1：参考redis.js文件


------------------------------------------------------------------------------------------
安装async（处理多层异步回调）；
1：安装：npm install async
2：js中引用：var async = require('async');

-------------------------------------------------------------------------------------------
单独安装ejs/html模板引擎：
ejs引擎：
1：在项目根目录安装ejs：npm install ejs
2：app.js中引入ejs：var ejs = require('ejs');
3：设置视图引擎：app.set('view engine', 'ejs');

html引擎：
var ejs = require('ejs');
app.engine('html', ejs.__express);
app.set('view engine', 'html');


------------------------------------------------------------------------------------------
connect-favicons中间件：
参考：https://github.com/theworkers/connect-favicons/blob/master/README.md
1：安装：npm install --save git://github.com/theworkers/connect-favicons.git
2：var favicons = require('connect-favicons');
app.use(favicons(__dirname + '/public/img/icons'));  //必须在任何use之前


-------------------------------------------------------------------------------------------
nodejs https证书：
1：阿里云申请免费证书并下载：
（下载1：https://sh-btfs-v2-yun-ftn.weiyun.com/ftn_handler/a33745e6049fb5427962ff094957d6eb4538bb5aa860430e29cb8a0677a166b044324664662da6d8fe7bceba29a21519f120c325a2ca85dc595d1e3f12709c6d/214047710730603.key?fname=214047710730603.key&from=30111&version=2.0.0.2&uin=772978409
下载2：https://sh-btfs-v2-yun-ftn.weiyun.com/ftn_handler/f0a0bb4c95605cf9bbcd622a4b050c7b9af8bc2eace735252d970a44f8d358c452f660d51c1f7d95ad1af40389c280e66df46f5f92c3f29167e7406a3e627011/214047710730603.pem?fname=214047710730603.pem&from=30013&version=2.0.0.2&uin=772978409）

2：引用https和fs模块：var https = require('https');
   var fs = require('fs');
4：引用证书(js文件目录为开始)：var options = {
   key:fs.readFileSync('./.../.key'),
   cert:fs.readFileSync('./.../.pem')
   }
5：创建https实例：var ssl = https.creatServer(options,requestHandler);
   ssl.listen(443);
6：打印日志：console.log('https web server start, port:443')
7：重启服务
-------------------------------------------------------------------------------------------

2009年开始应用，网易，知乎，阿里，优步等创业团队，生于社区，github（学习，项目），生态圈：npm为中心（包管理器），开发阶段执行工具nodemore，测试工具node-inspector，开发工具sublimetext,webstorm,atom，单元测试和功能测试都有工具和类库，测试框架，断言工具，部署和运维方面：进程管理工具pm2&forever
开源项目：express、pm2、jade、coffeescript、atom、socket.io（websocket）、mongodb、mocha

--------------------------------------------------------------------------------------------
DOM操作：jQuery：基于js的库

--------------------------------------------------------------------------------------------

全栈语言JS：
前端框架：AngularJS：MVC架构
后端：node.js
移动端：ReactNative

--------------------------------------------------------------------------------------------
Node.js特点：部署简单、事件驱动、异步编程（I/O操作、数据库操作）、高效性能、单线程与多进程

--------------------------------------------------------------------------------------------
web全栈：html/css页面构建、浏览器端开发、服务器端开发、数据库端开发、服务器运维
JS全栈解决方案：MongoDB + Express + AngularJS + Node.js = Mean Stack
执行环境：Google V8（chrome）、文件系统（扩展，fs）、网络功能（http/tcp/udp/dns/tls/ssl）、二进制数据、数据流、加密与解密。需要引用模块。
开发工具：webStorm



-----------------------------------------------------------------------------------------------
1：安装epel。命令：yum install epel-release
2：安装mongdb服务器端：yum install mongodb-server
3：安装mongodb客户端：yum install mongodb
4：查看mongodb安装情况：mongo --version
5：安装redis：yum install redis
6：查看redis安装情况：redis-cli --version
7：创建文件：vim test.js   代码：console.log('hello,Node')  esc后:wq!保存文件并退出。


-------------------------------------------------------------------------------------------
核心模块：nodejs自带模块，例如http
第三方模块：express  
mkdir：新建文件夹
mv：文件夹改名

-------------------------------------------------------------------------------------------
设置为随机启动node的js文件（forever为设置守护进程，关闭后自动重启）
npm install -g forever
forever start XX.js
forever stop XX.js
forever restart XX.js
ps -ef | grep node
修改/etc/rc.local文件，增加一行：forever start -w /home/testNodeJ/part8/web.js
查看forever启动列表：:forever list

-------------------------------------------------------------------------------------------
安装Log4js日志模块：
1：安装模块：npm install log4js
2：创建日志目录：log，并创建两个文件，log4js.js和log4js.json
3：编写配置文件log4js.json：
4：编写js文件，导入配置文件，并对外导出接口
5：外部引用



-------------------------------------------------------------------------------------------
firewall服务
systemctl start firewalld.service 开启
systemctl stop firewalld.service 关闭
systemctl restart firewalld.service 重启
firewall-cmd --state 状态
systemctl status firewalld.service 服务状态
systemctl enable firewalld.service 开机启动
systemctl disable firewalld.service 开机禁用
查看服务是否开机启动：systemctl is-enabled firewalld.service
查看已启动的服务列表：systemctl list-unit-files|grep enabled
查看启动失败的服务列表：systemctl --failed
配置firewalld-cmd

查看版本： firewall-cmd --version
查看帮助： firewall-cmd --help
显示状态： firewall-cmd --state
查看所有打开的端口： firewall-cmd --zone=public --list-ports
更新防火墙规则： firewall-cmd --reload
查看区域信息:  firewall-cmd --get-active-zones
查看指定接口所属区域： firewall-cmd --get-zone-of-interface=eth0
拒绝所有包：firewall-cmd --panic-on
取消拒绝状态： firewall-cmd --panic-off
查看是否拒绝： firewall-cmd --query-panic
 
开启一个端口
添加
firewall-cmd --zone=public --add-port=443/tcp --permanent
（--permanent永久生效，没有此参数重启后失效）
重新载入
firewall-cmd --reload
查看
firewall-cmd --zone=public --query-port=443/tcp
删除
firewall-cmd --zone=public --remove-port=80/tcp --permanent

-------------------------------------------------------------------------------------------

创建tcp服务器（net模块,Socket通信）：实时，双向，不会主动关闭


-------------------------------------------------------------------------------------------
安装ftp客户端：
yum -y install ftp

安装FTP服务器端
1：安装vsftpd：yum -y install vsftpd
2：检查vsfptd服务的状态：systemctl status vsftpd
3：启动vsftpd服务：systemctl start vsftpd
4：设置vsftpd开机启动：systemctl enable vsftpd

关闭SELINUX：vi /etc/selinux/config
   #SELINUX=enforcing 注释掉  #SELINUXTYPE=targeted 注释掉  SELINUX=disabled #增加
   setenforce 0 使配置立即生效
5：安装vsftpd虚拟用户配置依赖包：yum install -y psmisc net-tools systemd-devel libdb-devel perl-DBI

   useradd vsftpd -d /home/ftproot -s /bin/false     
   #新建系统用户ftpadmin，用户目录为/home/ftproot, 用户登录终端设为/bin/false(即使之不能登录系统)
    chown vsftpd:vsftpd /home/ftproot -R
    #通过chown改变文件的拥有者和群组

    mkdir /etc/vsftpd/vconf
    cd /etc/vsftpd/vconf
    touch web1  #这里创建虚拟用户配置文件
    mkdir -p /home/ftproot/web1/http/mydic
    #设置FTP上传文件新增权限，最新的vsftpd要求对主目录不能有写的权限所以ftp为755，主目录下面的子目录再设置777权限  

  chmod -R 755 /home/ftproot/web1/http
  chmod -R 777 /home/ftproot/web1/http/mydic
  vi web1 #编辑用户web1配置文件，其他的跟这个配置文件类似，输入下面红色内容
  local_root=/home/ftproot/web1/http/　　#设置FTP账号根目录
　write_enable=YES
  anon_world_readable_only=NO
  anon_upload_enable=YES
  anon_mkdir_write_enable=YES
  anon_other_write_enable=YES
  cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf-bak #备份默认配置文件
sed -i "s/anonymous_enable=YES/anonymous_enable=NO/g" '/etc/vsftpd/vsftpd.conf'

sed -i "s/#anon_upload_enable=YES/anon_upload_enable=NO/g" '/etc/vsftpd/vsftpd.conf'

sed -i "s/#anon_mkdir_write_enable=YES/anon_mkdir_write_enable=YES/g" '/etc/vsftpd/vsftpd.conf'

sed -i "s/#chown_uploads=YES/chown_uploads=NO/g" '/etc/vsftpd/vsftpd.conf'

sed -i "s/#async_abor_enable=YES/async_abor_enable=YES/g" '/etc/vsftpd/vsftpd.conf'

sed -i "s/#ascii_upload_enable=YES/ascii_upload_enable=YES/g" '/etc/vsftpd/vsftpd.conf'

sed -i "s/#ascii_download_enable=YES/ascii_download_enable=YES/g" '/etc/vsftpd/vsftpd.conf'

sed -i "s/#ftpd_banner=Welcome to blah FTP service./ftpd_banner=Welcome to FTP service./g" '/etc/vsftpd/vsftpd.conf'

echo -e "use_localtime=YES\nlisten_port=21\nchroot_local_user=YES\nidle_session_timeout=300

\ndata_connection_timeout=1\nguest_enable=YES\nguest_username=vsftpd

\nuser_config_dir=/etc/vsftpd/vconf\nvirtual_use_local_privs=YES

\npasv_min_port=10060\npasv_max_port=10090

\naccept_timeout=5\nconnect_timeout=1" >> /etc/vsftpd/vsftpd.conf
配置文件说明：

anonymous_enable=NO //设定不允许匿名访问
local_enable=YES //设定本地用户可以访问。注：如使用虚拟宿主用户，在该项目设定为NO的情况下所有虚拟用户将无法访问
chroot_list_enable=YES //使用户不能离开主目录
ascii_upload_enable=YES
ascii_download_enable=YES //设定支持ASCII模式的上传和下载功能
pam_service_name=vsftpd   //PAM认证文件名。PAM将根据/etc/pam.d/vsftpd进行认证


#以下这些是关于vsftpd虚拟用户支持的重要配置项，默认vsftpd.conf中不包含这些设定项目，需要自己手动添加
guest_enable=YES //设定启用虚拟用户功能
guest_username=vsftpd //指定虚拟用户的宿主用户，CentOS中已经有内置的ftp用户了,通过映射到vsftpd
user_config_dir=/etc/vsftpd/vuser_conf //设定虚拟用户个人vsftp的CentOS FTP服务文件存放路径。存放虚拟用户个性的CentOS FTP服务文件(配置文件名=虚拟用户名)
allow_writeable_chroot=YES              //这个非常重要，没有会报错


建立虚拟用户名单文件

touch /etc/vsftpd/virtusers
编辑虚拟用户名单文件：（第一行账号，第二行密码，注意：不能使用root做用户名，系统保留）

vi /etc/vsftpd/virtusers
web1
123456
:wq! #保存退出
八、生成虚拟用户数据文件

db_load -T -t hash -f /etc/vsftpd/virtusers /etc/vsftpd/virtusers.db

chmod 600 /etc/vsftpd/virtusers.db #设定PAM验证文件，并指定对虚拟用户数据库文件进行读取
九、在/etc/pam.d/vsftpd的文件头部加入以下信息（在后面加入无效）

修改前先备份 

cp /etc/pam.d/vsftpd /etc/pam.d/vsftpdbak
vi /etc/pam.d/vsftpd #先注释到vsftpd所有配置，加入下面红色部分

auth    sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/virtusers
account sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/virtusers
注意：如果系统为32位，上面改为lib，否则配置失败；

十、最后重启vsftpd服务器

systemctl restart vsftpd.service

测试ftp localhost



