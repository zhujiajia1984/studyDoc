
-------------------------------------------------------------------------------------------------------
mongodb nodejs驱动（官网）：
1：资料：http://mongodb.github.io/node-mongodb-native/
2：安装：npm install mongodb --save
3：



-------------------------------------------------------------------------------------------------------
官网资料：
1：官网：https://www.mongodb.com/
2：文档：https://docs.mongodb.com/
3：版本：https://www.mongodb.com/what-is-mongodb
4：概念：具有扩展性和灵活性的文档型数据库
5：特性1：类JSON格式文档、数据结构可以灵活改变（无限层次）；
6：特性2：文档模型映射到程序中的对象，使coding更容易；
7：特性3：提供了强大的临时查询，索引和实时聚合功能
8：特性4：核心是分布式数据库（集群）、快速读写、低廉成本
9：特性5：免费和开源，使用js语法（shell）
10：架构：参考：https://www.mongodb.com/mongodb-architecture

-------------------------------------------------------------------------------------------------------
dockerhub安装(robo3T)：
1：从dockerhub上拉取mongo：docker pull mongo
2：使用docker-compose启动。
3：显示版本：执行命令：mongo，初始化并进入shell。
4：使用robo3T客户端连接mongodb数据库，并执行shell操作

-------------------------------------------------------------------------------------------------------
文档介绍（菜鸟教程 ）：
1：文档value：bson值多种类型
2：文档field字段名：不能重复
3：文档field字段最大值：有索引的文档有最大值限制，1024个字节
4：文档Dot Notation（点操作符）：作用1：获得数组值"<array>.<index>" 作用2：获得嵌入的文档属性名"<embedded document>.<field>"
5：文档限制：大小限制：大小不超过16M，
6：文档字段顺序：一般按照写入顺序来，除了2个特殊情况：_id总是第一个字段；重命名字段名称将会导致重新排序
7：文档特殊字段：_id
8：文档特殊结构：查询和过滤、更新和索引


-------------------------------------------------------------------------------------------------------
mongodb 增删改查操作（CRUD）：
1：数据库（database） > 集合（collection） > 文档（document） > Bson
2：mongo命令：进入shell, 查看版本：db.version()， db命令：使用默认的test数据库
3：use命令：切换当前数据库句柄，操作都是基于当前句柄上执行。例：use admin / use test，此事db变量则会指向当前数据库
4：show命令：显示信息。
   1：show dbs：显示数据库列表。admin数据库：管理系统用户账号和权限等信息（不要乱动）。local数据库：系统内部使用（        不要乱动）。config数据库：系统内部使用（不要乱动）
   2：show collections：显示数据库下所有集合
5：管理数据库：
    1：显示数据库列表：show dbs
    2：切换数据库句柄：use dbname：可use不存在的库(隐式只存在于内存，只有当创建集合或文档时，再创建实体文件。)
    3：创建数据库：use mydb / db.createCollection("myColl")：显示创建集合，即可创建库（当集合都被删除后，库也被删）
       传统数据库提前创建表，是因为要先定义表结构，然后nosql的mongo由于文档可扩展的，所以没有必要建立空的集合，当数据被创建时再隐式创建，       除非要对集合进行属性设置
    4：删除数据库：use mydb / db.dropDatabase();
    5：查看数据库信息：db.stats()
    6：帮助：db.help()
6：管理集合：
    1：显示集合列表：show collections
    2：创建集合：方式一：隐式的，用集合名称。当数据被插入的时候，如果集合不存在，则创建。db.myNewCollection2.insertOne( { x: 1 } )db.myNewCollection3.createIndex( { y: 1 } )
       方式二：显示创建，用函数创建（可指定集合参数）：createCollection(name, [options]) 
    3：删除集合：方式1：db.collectionName.drop();  方式2：var coll = db.getColleciton("name"); / coll.drop();
       (如果集合都删除了，则数据库也被删除，如果数据删除了，则集合也被删除）
7：管理文档：
   1：创建文档：insert（不常用）、insertOne、insertMany
      _id：系统默认生成，可以自己指定，但在集合内不能重复。
      insert：https://docs.mongodb.com/manual/reference/method/db.collection.insert/
      insertOne：https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/#db.collection.insertOne
      insertMany：https://docs.mongodb.com/manual/reference/method/db.collection.insertMany/#db.collection.insertMany
   2：查询文档：find()、其他
      find()：https://docs.mongodb.com/manual/reference/method/db.collection.find/#db.collection.find
      query运算符：https://docs.mongodb.com/manual/reference/operator/query/#query-selectors
   3：查询文档数量：db.collecitonName.find().count()
   4：删除文档：deleteOne（）、deleteMany（）、remove()等
      deleteOne：删除第一个匹配条件的文档，不能用于固定集合（capped collection），不会删除索引
      https://docs.mongodb.com/manual/reference/method/db.collection.deleteOne/#db.collection.deleteOne
      deleteMany：https://docs.mongodb.com/manual/reference/method/db.collection.deleteMany/#db.collection.deleteMany
   5：更新文档：updateOne()、updateMany()、replaceOne()、update()等
      更新操作符：https://docs.mongodb.com/manual/reference/operator/update/
      updateOne：https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/#db.collection.updateOne
      updateMany：https://docs.mongodb.com/manual/reference/method/db.collection.updateMany/#db.collection.updateMany
      replaceOne：替换整个文档内容，https://docs.mongodb.com/manual/reference/method/db.collection.replaceOne/#db.collection.replaceOne
8：管理视图（View）：3.4版本后，支持从已有的集合和视图中创建只读属性的视图，可以看作是一种特殊的集合（只读）
   1：创建视图：createview、createcollection、create
      https://docs.mongodb.com/manual/core/views/
   2：删除视图： db.collection.drop()
   3：显示视图：db.getCollectionNames()、 db.getCollectionInfos() 

-----------------------------------------------------------------------------------------------------------------------------------
mongodb 聚合（Aggregation）：
1：聚合：将多个文档中的值分组聚合在一起，并对分组数据执行各种操作，以返回一个结果。主要用于处理数据（(诸如统计平均值,求和等）
2：聚合三种方式： aggregation pipeline、map-reduce function、 single purpose aggregation methods
3：聚合管道（Aggregation Pipeline，流水线）：文档经过管道处理后，最后输出相应的结果。管道基本的功能有两个：一是对文档进行“过滤”，二是对文档进行  “变换”。管道的每一个阶段(stage)的输出结果是后一个阶段的输入。
4：Map-Reduce：使用js函数进行map（映射）和reduce（化简）
5：single purpose aggregation methods：简单的聚合：用在单个集合， db.collection.count() /   db.collection.distinct()

------------------------------------------------------------------------------------------------------------------------------
mongodb 数据模型（Data Model）：
1：相对传统型数据库来说，具有灵活的表结构，数据之间的关系可以用引用和嵌入两种方式表达。
2：引用（References）：标准化的数据模型，通过ID来表达数据之间的关系，优点：可以避免嵌入重复的数据（1对多）、树状结构
   参考：https://docs.mongodb.com/manual/core/data-model-design/#data-modeling-referencing
   案例：https://docs.mongodb.com/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/#data-modeling-publisher-and-books
3：嵌入式（Embedded Data）：当有实体包含关系时（1对1），当子结构都属于父结点时（1对多）
   参考：https://docs.mongodb.com/manual/core/data-model-design/#data-modeling-embedding
   案例：1对1关系：https://docs.mongodb.com/manual/tutorial/model-embedded-one-to-one-relationships-between-documents/#data-modeling-example-one-to-one  1对多关系：https://docs.mongodb.com/manual/tutorial/model-embedded-one-to-many-relationships-between-documents/#data-modeling-example-one-to-many
4：模式验证（Schema Validation）：能够在插入和更新数据的时候进行表结构验证
   1：创建和加入模式验证：createCollection()、 collMod命令、 
   2：json模式验证：https://docs.mongodb.com/manual/core/schema-validation/
5：数据模型建模的考虑因素：
   1：Document Growth文档增长：push数组或者新增字段都会使文档增长。
   2：Atomicity原子性：文档级别是原子操作，案例：https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#data-modeling-atomic-operation
   3：Sharding分片：
   4：Indexes索引：
   5：Large Number of Collections大量的集合群：日志使用
   6：Collection Contains Large Number of Small Documents大量小文档的优化：考虑嵌入
   7：Storage Optimization for Small Documents小文档存储优化：

-----------------------------------------------------------------------------------------------------------------------------------
mongodb 索引（indexes）
1：定义：在集合层次定义索引（集合内唯一），支持任何字段和子字段进行索引
2：创建索引：createIndex（），https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/#db.collection.createIndex
3：索引类型：单字段索引、复合索引（多字段）。。。：https://docs.mongodb.com/manual/indexes/#index-types
4：索引属性：唯一索引（Unique Indexes）、。。。
5：默认索引：_id为默认索引，


-----------------------------------------------------------------------------------------------------------------------------------
5：log命令：显示内存中日志最后一部分
6：配置数据库用户账号和权限：
   新增：createUser命令：例如：use admin
   db.createUser({user:"testadmin",pwd:"test",roles:["readWrite", "dbAdmin"]})
   删除：dropUser命令：例如：db.dropUser("testadmin")
   显示：show users：显示所有用户
   权限：每个数据库都把用户账号存储在集合system.users集合中。默认安装后会有admin数据库，需要创建用户管理员账户和数据库管理员账户。（用户管理员：创建和配置用户账号 数据库管理员：配置和管理数据库）
   例如：use admin / db.createUser({user:"useradmin",pwd:"test",roles:["userAdminAnyDatabase"]})
7：开启用户验证：关闭mongodb进程：kill -15 pid / mongod --config /home/mongodb/mongod_config.conf
8：用户管理员登录：mongo --username "useradmin" --password "test" 127.0.0.1:28001/admin
9：创建数据库管理员：use admin / db.createUser({user:"dbadmin",pwd:"test",roles:["readWriteAnyDatabase", "dbAdminAnyDatabase", "clusterAdmin"]})
10：切换用户：use admin / db.auth("username", "pwd");
11：数据库管理员登录：mongo --username "dbadmin" --password "test" 127.0.0.1:28001/admin


-------------------------------------------------------------------------------------------------------
windows本地安装：
1：官网下载
2：默认安装：并添加环境变量
3：创建数据目录：D:\Project\mongodb\data\db
   创建日志目录：D:\Project\mongodb\data\log
   创建配置文件：D:\Project\mongodb\mongod.cfg并配置（详见：https://docs.mongodb.com/manual/reference/configuration-options/#configuration-file）
   内容：systemLog:
    destination: file
    path: D:\Project\mongodb\data\log\mongod.log
storage:
    dbPath: D:\Project\mongodb\data\db
4：安装服务（必须是cmd的admin进入）："C:\Program Files\MongoDB\Server\3.6\bin\mongod.exe" --config "D:\Project\mongodb\mongod.cfg" --install（必须要用此全路径命令，否则会有问题）
5：启动服务（关闭服务）：net start/stop MongoDB
6：删除服务："C:\Program Files\MongoDB\Server\3.6\bin\mongod.exe" --remove
7：启动mongo shell：mongo命令即可
8：use admin;

-------------------------------------------------------------------------------------------------------
yum安装(centos系统安装mongodb)：
0：centos安装好后自带yum：查看rpm -qa|grep yum，卸载系统安装的yum
1：官网：http://yum.baseurl.org/(菜鸟：http://www.runoob.com/linux/linux-yum.html)
2：建立下载仓库文件：/etc/yum.repos.d/mongodb-org-3.6.repo
3：内容为：
   [mongodb-org-3.6]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.6/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc
4：开始安装：sudo yum install -y mongodb-org
5：启动：sudo service mongod start
6：验证是否启动成功：检查日志文件： /var/log/mongodb/mongod.log中是否有一条记录：[initandlisten] waiting for connections on port <port> 端口是在/etc/mongod.conf中定义的，默认27017
7：设置开机启动：sudo chkconfig mongod on
8：停止：sudo service mongod stop
9：重启：sudo service mongod restart
10：日志文件：/var/log/mongodb/mongod.log
    数据文件：/var/lib/mongo
    配置文件：/etc/mongod.conf
11：配置远程连接：打开防火墙端口：27017
12：创建管理员：启动mongdb，不使用验证（https://docs.mongodb.com/manual/tutorial/enable-authentication/#user-administrator）启动mongo shell：直接执行mongo即可进入shell（需要配置环境变量）输入db回车，显示当前所在的数据库。输入show dbs显示所有数据库


-------------------------------------------------------------------------------------------------------
安装mongodb
1：官网下载对应的安装包（https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/）
2：解压：tar -zxvf mongodb-linux-x86_64-rhel70-3.4.4.tgz
3：拷贝到指定目录：mv  mongodb-linux-x86_64-rhel70-3.4.4/ /usr/local/mongodb
4：加入到环境变量中：
   vi /etc/profile
   在最下面加入：
   export PATH=$PATH:/usr/local/mongodb/bin
   :wq! #保存退出
   source /etc/profile  #使配置立即生效
5：创建一个数据文件目录：mkdir -p /home/mongodb/data/db

-------------------------------------------------------------------------------------------------------
启动mongodb和配置：
1：mongod命令（安装目录的bin文件下）：mongod --version
2：查看所有打开的端口： firewall-cmd --zone=public --list-ports
   添加：firewall-cmd --zone=public --add-port=28001/tcp --permanent
   firewall-cmd --zone=public --add-port=29001/tcp --permanent（http服务，端口+1000）
   更新：firewall-cmd --reload
3：配置config文件：mongod_config_noPwd.conf
verbose = true
logpath = /home/mongodb/log/mongodb.log
logappend = true
port = 28001
journal = true
fork = true
dbpath = /home/mongodb/data/db
rest = true

4：启动数据库（没有验证）：mongod --config /home/mongodb/mongod_config_nopwd.conf
5：关闭数据库：普通关闭： mongo 127.0.0.1:28001 / use admin / db.shutdownServer()  强制关闭：ps -ef| grep mongod   kill -15 pid
8：登录数据库：mongo --username "dbadmin" --password "test" 127.0.0.1:28001/admin
9：可以开始操作


-------------------------------------------------------------------------------------------------------
mongodb shell（脚本编程）：
1：Mongo.getDB(db)：返回一个数据库对象，表示指定的数据库
2：Mongo(host:port)：返回一个连接对象，连接到指定的主机和端口
3：connect(host:port/db)：连接到指定的数据库，并返回一个数据库对象
4：load(path)：加载并运行JS脚本
5：执行javascript脚本：
   方式一：--eval：mongo test --eval "printjson(db.getCollectionNames())"
   方式二：使用命令mongo方式来执行： mongo abc.js def.js
   方式三：load函数

















